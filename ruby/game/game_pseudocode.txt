Assume your driver code will handle input and output as far as the user is concerned. In other words, write a class designed for a computer program to use, not one designed for a human to use directly, then use driver code to bridge the gap between human and Ruby object.
One user can enter a word (or phrase, if you would like your game to support that), and another user attempts to guess the word.
Guesses are limited, and the number of guesses available is related to the length of the word.
Repeated guesses do not count against the user.
The guessing player receives continual feedback on the current state of the word. So if the secret word is "unicorn", the user will start out seeing something like "_ _ _ _ _ _ _", which would become "_ _ _ c _ _ _" after the user enters a guess of "c".
The user should get a congratulatory message if they win, and a taunting message if they lose.

Class for word-guessing:
class Hangman
- Needs to collect a word
- Needs to obtain the length of the word
- Keep track of guesses
- Limit guesses to length of word
- Needs to be able to search the word index
- Needs to result (multiple) instances of letters
- Word must be masked 

Step 1:
Obtain a word and hash it to return blanks in the same length